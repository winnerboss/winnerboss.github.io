<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode039</title>
      <link href="/uncategorized/_0039/"/>
      <url>/uncategorized/_0039/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>遇见</title>
      <link href="/mySong/YuJian/"/>
      <url>/mySong/YuJian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-obzOxBfC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-obzOxBfC"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "遇见",              author: "文二大佬",              url: "http://tx.stream.kg.qq.com/szkge/b36845eee22f3fc93429142bc5818356934fdebd?ftnrkey=c993434e5db5c3a6e2c989b86aace47faa0d446ab279cb51fabc0c4ce406cfa412b1c6745c640462de856f79699bb930429ea644c8706684dcc6ab80d7762a4f&amp",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
      
      
      <categories>
          
          <category> 我的翻唱 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现 LeetCode 18. 四数之和</title>
      <link href="/leetcode/_0018/"/>
      <url>/leetcode/_0018/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">18. 四数之和</a></h3><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p>注意：</p><p>答案中不可以包含重复的四元组。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, -<span class="number">2</span>, <span class="number">2</span>]，和 target = <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-<span class="number">1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [-<span class="number">2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>这道题在第15题的基础上又多了一个数字，那么按照之前的思路，我们就可以实现O(n<sup>3</sup>)的复杂度，前两个数用循环遍历，后两个数使用双指针查找。<a id="more"></a></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> list;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span> &amp;&amp; nums[i] &lt;= target / <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[nums.length - <span class="number">3</span>] + nums[nums.length - <span class="number">2</span>] + nums[nums.length - <span class="number">1</span>] &lt; target) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span> &amp;&amp; nums[j] &lt;= (target - nums[i]) / <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] + nums[nums.length - <span class="number">2</span>] + nums[nums.length - <span class="number">1</span>] &lt; target - nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> k = j + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> n = nums.length - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (k &lt; n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[k] + nums[n] == target - nums[j] - nums[i]) &#123;</span><br><span class="line">                        List&lt;Integer&gt; L = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                        L.add(nums[i]);</span><br><span class="line">                        L.add(nums[j]);</span><br><span class="line">                        L.add(nums[k]);</span><br><span class="line">                        L.add(nums[n]);</span><br><span class="line">                        list.add(L);</span><br><span class="line">                        k++;</span><br><span class="line">                        <span class="keyword">while</span> (k &lt; n &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) k++;</span><br><span class="line">                        n--;</span><br><span class="line">                        <span class="keyword">while</span> (k &lt; n &amp;&amp; nums[n] == nums[n + <span class="number">1</span>]) n--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[k] + nums[n] &lt; target - nums[j] - nums[i]) &#123;</span><br><span class="line">                        k++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        n--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现 LeetCode 16. 三数之和</title>
      <link href="/leetcode/_0016/"/>
      <url>/leetcode/_0016/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">16. 最接近的三数之和</a></h3><p>给定一个包括 <em>n</em> 个整数的数组 <code>nums</code> 和 一个目标值 <code>target</code>。找出 <code>nums</code> 中的三个整数，使得它们的和与 <code>target</code> 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</span><br><span class="line"></span><br><span class="line">与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>这道题的思路和第15题如出一辙，唯一不同的是需要一个变量记录离目标值最近的距离，然后实时保存最小距离的情况就可以了。<a id="more"></a></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MAX_VALUE;<span class="comment">//与目标值的距离</span></span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;<span class="comment">//保存最接近的三数和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;<span class="comment">//双指针</span></span><br><span class="line">            <span class="keyword">int</span> n = nums.length - <span class="number">1</span>;<span class="comment">//双指针</span></span><br><span class="line">            <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[j] + nums[n];</span><br><span class="line">                <span class="keyword">int</span> t = Math.abs(target - sum);</span><br><span class="line">                <span class="keyword">if</span> (t &lt; max) &#123;</span><br><span class="line">                    max = t;</span><br><span class="line">                    r = sum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sum &lt; target) j++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> sum;<span class="comment">//题目中假定只有一个答案，所以若结果正好等于目标值，则直接返回</span></span><br><span class="line">                <span class="keyword">else</span> n--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现 LeetCode 15. 三数之和</title>
      <link href="/leetcode/_0015/"/>
      <url>/leetcode/_0015/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>​        刷了leetcode一个多月的题，我终于刷完了所有简单难度的题目，开始了奋战中等难度的旅程。但在一开始我就遇到了阻碍——我遇到了一系列的关于<strong>数组的目标值查找和求排列组合</strong>的问题。在解决完这一系列问题之后，我决定总结一下这些题目的思路，分享给大家一些自己的收获。</p><p>​        第一篇文章先从“三数之和”这道题开始说起。</p></blockquote><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h3><p>给定一个包含 <em>n</em> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 <em>a + b + c =</em> 0 ？找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>解题思路：</p><p>首先，作为一名<del>经验丰富</del>的程序员，你的第一反应绝对应该是：不要使用O(n<sup>3</sup>)的三重循环来求解！（太蠢了）</p><p>那应该怎么处理呢？<a id="more"></a></p><p>相信大家都完成了leetcode中的第一题<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a>——其方法是使用Hash表来实现 O(n)的时间复杂度。对于三数之和，如果先选定一个数a，再用第一题的方法去查找剩下的两个数b,c之和是否为0-a，那么算法的时间复杂度就可以达到O(n<sup>2</sup>)。但是这两道题不一样的地方在于，在第一题中只存在一个答案并且数组中没有重复的数字。若想用到数组中重复的数字，则需要记录每个数字出现的次数，这至少要用到Map或者格外的数组来标记；计算结果的同时还需要考虑如何去重。所以此题仅仅依靠哈希表无法直接得出结果。</p><p>那么，现在我们需要考虑的问题就是，如何利用重复的数字以及如何去重。能够同时解决这两个问题的方法就是：将数组排序后，用双指针进行查找。</p><p><strong>排序是解决大多数去重问题的常用方法</strong>，在排序后进行双指针查找某个数，只需要遍历一遍数组。排序之后对于每个元素n，我们都把它当做符合条件的三个数中最小的那个，从而在排在n后面的元素集合中去寻找两个和为0-n的元素。因为剩下的元素是排好序的，我们可以用两个指针分别从n的后一位、数组的末尾开始向中间移动。若两指针元素和小于0-n，则前面的指针向后移，若两指针元素和大于0-n，则后面的指针向前移。若找到符合条件的三个元素则加入到返回结果集中，之后继续进行判断，若下一个元素与上一个已完成判断的元素相同时就直接跳过，这样就实现了去重的操作。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; r = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> one = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (one &lt; nums.length - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> target = <span class="number">0</span> - nums[one];</span><br><span class="line">            <span class="keyword">int</span> two = one + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> three = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (two &lt; three) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[two] + nums[three];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                    three--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    two++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    r.add(Arrays.asList(nums[one], nums[two], nums[three]));</span><br><span class="line">                    <span class="keyword">while</span> (++two &lt; three &amp;&amp; nums[two] == nums[two - <span class="number">1</span>]) ;<span class="comment">// 去重</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (++one &lt; nums.length - <span class="number">2</span> &amp;&amp; nums[one] == nums[one - <span class="number">1</span>]) ;<span class="comment">// 去重</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n<sup>2</sup>)。将0换为任意的数字n，即可应对所有 <em>a + b + c =</em> n时的情况。</p><p>那么问题来了：对于这道题里的和为0，有没有什么特殊的求解算法使运算更快呢？</p><p>分析：当三个数都为0时，符合题意；当三个数不全为0时，其中必然会有一个正数和一个负数。所以可以把原数组中的正数与负数分别取出，分为正数数组和负数数组两个数组。将两个数组排序后，从正数数组中取数字a，负数数组中取数字b，再查询原数组中有没有0-a-b的数（可以使用map映射表的结构保存原数组元素进行查找，并且设定a&gt;=c&gt;=b可以实现去重）。由于结果中可能用到重复的数字，还需要记录每个数字出现的次数（使用数组即可同时记录出现次数）。</p><p>下面贴出leetcode答案中运算时间最短的大神代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> minValue = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxValue = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> negSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> posSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> zeroSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) &#123;<span class="comment">//遍历原数组</span></span><br><span class="line">            <span class="keyword">if</span> (v &lt; minValue)</span><br><span class="line">                minValue = v;<span class="comment">//记录最小的负数</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; maxValue)</span><br><span class="line">                maxValue = v;<span class="comment">//记录最大的正数</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt; <span class="number">0</span>)</span><br><span class="line">                posSize++;<span class="comment">//记录正数个数</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">                negSize++;<span class="comment">//记录负数个数</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                zeroSize++;<span class="comment">//记录0的个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zeroSize &gt;= <span class="number">3</span>)<span class="comment">//若有3个以上的0，则0,0,0符合要求</span></span><br><span class="line">            res.add(Arrays.asList(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">if</span> (negSize == <span class="number">0</span> || posSize == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">if</span> (minValue * <span class="number">2</span> + maxValue &gt; <span class="number">0</span>)<span class="comment">//正数中大于最小负数两倍的数字一定不满足条件</span></span><br><span class="line">            maxValue = -minValue * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (maxValue * <span class="number">2</span> + minValue &lt; <span class="number">0</span>)<span class="comment">//负数中小于最大正数两倍的数字一定不满足条件</span></span><br><span class="line">            minValue = -maxValue * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[maxValue - minValue + <span class="number">1</span>];<span class="comment">//创建新的数组，采用map映射表方式记录满足条件的数字及其出现次数</span></span><br><span class="line">        <span class="keyword">int</span>[] negs = <span class="keyword">new</span> <span class="keyword">int</span>[negSize];<span class="comment">//负数数组</span></span><br><span class="line">        <span class="keyword">int</span>[] poses = <span class="keyword">new</span> <span class="keyword">int</span>[posSize];<span class="comment">//正数数组</span></span><br><span class="line">        negSize = <span class="number">0</span>;</span><br><span class="line">        posSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : nums) &#123;<span class="comment">//遍历原数组，将新的三个数组填值，在map中记录各数字出现次数</span></span><br><span class="line">            <span class="keyword">if</span> (v &gt;= minValue &amp;&amp; v &lt;= maxValue) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map[v - minValue]++ == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v &gt; <span class="number">0</span>)</span><br><span class="line">                        poses[posSize++] = v;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (v &lt; <span class="number">0</span>)</span><br><span class="line">                        negs[negSize++] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(poses, <span class="number">0</span>, posSize);<span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(negs, <span class="number">0</span>, negSize);<span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">int</span> basej = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = negSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//循环查找map中是否存在c使得a&gt;=c&gt;=b</span></span><br><span class="line">            <span class="keyword">int</span> nv = negs[i];</span><br><span class="line">            <span class="keyword">int</span> minp = (-nv) &gt;&gt;&gt; <span class="number">1</span>;<span class="comment">//minp为所选负数nv的绝对值除以二</span></span><br><span class="line">            <span class="keyword">while</span> (basej &lt; posSize &amp;&amp; poses[basej] &lt; minp)<span class="comment">//若正数的值小于minp时一定不满足要求，直接跳过</span></span><br><span class="line">                basej++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = basej; j &lt; posSize; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> pv = poses[j];</span><br><span class="line">                <span class="keyword">int</span> cv = <span class="number">0</span> - nv - pv;</span><br><span class="line">                <span class="keyword">if</span> (cv &gt;= nv &amp;&amp; cv &lt;= pv) &#123;<span class="comment">//若c在正数a与负数b之间则满足要求</span></span><br><span class="line">                    <span class="keyword">if</span> (cv == nv) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (map[nv - minValue] &gt; <span class="number">1</span>)<span class="comment">//若c==b且b出现次数在2次以上时，即可选取a,b,b的组合满足题意</span></span><br><span class="line">                            res.add(Arrays.asList(nv, nv, pv));</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cv == pv) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (map[pv - minValue] &gt; <span class="number">1</span>)<span class="comment">//若c==a且a出现次数在2次以上时，即可选取a,a,b的组合满足题意</span></span><br><span class="line">                            res.add(Arrays.asList(nv, pv, pv));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (map[cv - minValue] &gt; <span class="number">0</span>)<span class="comment">//若c!=a且c!=b，则c只需要出现一次即可选取a,c,b的组合满足题意</span></span><br><span class="line">                            res.add(Arrays.asList(nv, cv, pv));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cv &lt; nv)</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//若待求数字c小于所选负数，那么之后循环中的任何正数和负数都将大于本次循环的正数与负数，c=0-a-b,c的值就会越来越小，即之后所有循环待求数字c都将小于所选负数，所以直接break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在代码中添加了注释，把算法的大致思路标出来了，大家可以逐步阅读。</p><p>若数组中有n个负数m个正数，则算法时间复杂度为O(n*m)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
